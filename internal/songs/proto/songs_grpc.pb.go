// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: songs.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SongService_UploadSong_FullMethodName       = "/main.SongService/UploadSong"
	SongService_GetSong_FullMethodName          = "/main.SongService/GetSong"
	SongService_StreamSongFile_FullMethodName   = "/main.SongService/StreamSongFile"
	SongService_StreamAlbumCover_FullMethodName = "/main.SongService/StreamAlbumCover"
)

// SongServiceClient is the client API for SongService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SongServiceClient interface {
	UploadSong(ctx context.Context, in *UploadSongRequest, opts ...grpc.CallOption) (*UploadSongResponse, error)
	GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error)
	StreamSongFile(ctx context.Context, in *StreamSongFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSongFileResponse], error)
	StreamAlbumCover(ctx context.Context, in *StreamAlbumCoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAlbumCoverResponse], error)
}

type songServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSongServiceClient(cc grpc.ClientConnInterface) SongServiceClient {
	return &songServiceClient{cc}
}

func (c *songServiceClient) UploadSong(ctx context.Context, in *UploadSongRequest, opts ...grpc.CallOption) (*UploadSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadSongResponse)
	err := c.cc.Invoke(ctx, SongService_UploadSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) GetSong(ctx context.Context, in *GetSongRequest, opts ...grpc.CallOption) (*GetSongResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSongResponse)
	err := c.cc.Invoke(ctx, SongService_GetSong_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songServiceClient) StreamSongFile(ctx context.Context, in *StreamSongFileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamSongFileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[0], SongService_StreamSongFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamSongFileRequest, StreamSongFileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongFileClient = grpc.ServerStreamingClient[StreamSongFileResponse]

func (c *songServiceClient) StreamAlbumCover(ctx context.Context, in *StreamAlbumCoverRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamAlbumCoverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SongService_ServiceDesc.Streams[1], SongService_StreamAlbumCover_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamAlbumCoverRequest, StreamAlbumCoverResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamAlbumCoverClient = grpc.ServerStreamingClient[StreamAlbumCoverResponse]

// SongServiceServer is the server API for SongService service.
// All implementations must embed UnimplementedSongServiceServer
// for forward compatibility.
type SongServiceServer interface {
	UploadSong(context.Context, *UploadSongRequest) (*UploadSongResponse, error)
	GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error)
	StreamSongFile(*StreamSongFileRequest, grpc.ServerStreamingServer[StreamSongFileResponse]) error
	StreamAlbumCover(*StreamAlbumCoverRequest, grpc.ServerStreamingServer[StreamAlbumCoverResponse]) error
	mustEmbedUnimplementedSongServiceServer()
}

// UnimplementedSongServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSongServiceServer struct{}

func (UnimplementedSongServiceServer) UploadSong(context.Context, *UploadSongRequest) (*UploadSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadSong not implemented")
}
func (UnimplementedSongServiceServer) GetSong(context.Context, *GetSongRequest) (*GetSongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSong not implemented")
}
func (UnimplementedSongServiceServer) StreamSongFile(*StreamSongFileRequest, grpc.ServerStreamingServer[StreamSongFileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSongFile not implemented")
}
func (UnimplementedSongServiceServer) StreamAlbumCover(*StreamAlbumCoverRequest, grpc.ServerStreamingServer[StreamAlbumCoverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAlbumCover not implemented")
}
func (UnimplementedSongServiceServer) mustEmbedUnimplementedSongServiceServer() {}
func (UnimplementedSongServiceServer) testEmbeddedByValue()                     {}

// UnsafeSongServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SongServiceServer will
// result in compilation errors.
type UnsafeSongServiceServer interface {
	mustEmbedUnimplementedSongServiceServer()
}

func RegisterSongServiceServer(s grpc.ServiceRegistrar, srv SongServiceServer) {
	// If the following call pancis, it indicates UnimplementedSongServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SongService_ServiceDesc, srv)
}

func _SongService_UploadSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).UploadSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_UploadSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).UploadSong(ctx, req.(*UploadSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_GetSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongServiceServer).GetSong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SongService_GetSong_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongServiceServer).GetSong(ctx, req.(*GetSongRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongService_StreamSongFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamSongFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).StreamSongFile(m, &grpc.GenericServerStream[StreamSongFileRequest, StreamSongFileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamSongFileServer = grpc.ServerStreamingServer[StreamSongFileResponse]

func _SongService_StreamAlbumCover_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamAlbumCoverRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongServiceServer).StreamAlbumCover(m, &grpc.GenericServerStream[StreamAlbumCoverRequest, StreamAlbumCoverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SongService_StreamAlbumCoverServer = grpc.ServerStreamingServer[StreamAlbumCoverResponse]

// SongService_ServiceDesc is the grpc.ServiceDesc for SongService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SongService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.SongService",
	HandlerType: (*SongServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadSong",
			Handler:    _SongService_UploadSong_Handler,
		},
		{
			MethodName: "GetSong",
			Handler:    _SongService_GetSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSongFile",
			Handler:       _SongService_StreamSongFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAlbumCover",
			Handler:       _SongService_StreamAlbumCover_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "songs.proto",
}
